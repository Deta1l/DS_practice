# -*- coding: utf-8 -*-
"""assignment02_habr_visual_analysis_solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ag7PWu_FYymRJjsfZaOpAseKc6C8Trzr

<center>
<img src="../../img/ods_stickers.jpg">
## Открытый курс по машинному обучению
<center>
Автор материала: Юрий Кашницкий, программист-исследователь Mail.Ru Group <br>

Материал распространяется на условиях лицензии [Creative Commons CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/). Можно использовать в любых целях (редактировать, поправлять и брать за основу), кроме коммерческих, но с обязательным упоминанием автора материала.

# <center>Домашнее задание № 2 (демо). Решение. <br> Визуальный анализ данных о публикациях на Хабрахабре</center>

**Заполните код в клетках и ответьте на вопросы в [веб-форме](https://docs.google.com/forms/d/1y8qj5iYpaVhczjWnZuHd5NRR_sdCGy3eTF5n-qPKknQ).**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
# %matplotlib inline
import seaborn as sns
import matplotlib.pyplot as plt

"""## Загрузка и знакомство с данными

Для работы вам понадобятся предобработанные данные нашего учебного конкурса на kaggle [«Прогноз популярности статьи на Хабре»](https://www.kaggle.com/c/howpop-habrahabr-favs).
"""

df = pd.read_csv('../../data/howpop_train.csv')

df.shape

df.head(3).T

"""Избавимся сразу от переменных, названия которых заканчиваются на `_lognorm` (нужны для соревнования на Kaggle). Выберем их с помощью `filter()` и удалим `drop`-ом:"""

df.drop(filter(lambda c: c.endswith('_lognorm'), df.columns), 
        axis = 1,       # axis = 1: столбцы 
        inplace = True) # избавляет от необходимости сохранять датасет

df.describe().T

df.describe(include = ['object', 'bool'] # бинарные и категориальные переменные
           ).T

# настройка внешнего вида графиков в seaborn
sns.set_style("dark")
sns.set_palette("RdBu")
sns.set_context("notebook", font_scale = 1.5, 
                rc = { "figure.figsize" : (15, 5), "axes.titlesize" : 18 })

"""Столбец **`published`** (время публикации) содержит строки. Чтобы мы могли работать с этими данными как с датой/временем публикации, приведём их к типу `datetime`:"""

print(df.published.dtype)
df['published'] = pd.to_datetime(df.published, yearfirst = True)
print(df.published.dtype)

"""Создадим несколько столбцов на основе данных о времени публикации:"""

df['year'] = df.published.apply(lambda ts: ts.year)
df['month'] = df.published.apply(lambda ts: ts.month)
df['day'] = df.published.apply(lambda ts: ts.day)
df['dayofweek'] = df.published.apply(lambda ts: ts.isoweekday())
df['hour'] = df.published.apply(lambda ts: ts.hour)

"""-----

## 1\. В каком месяце (и какого года) было больше всего публикаций?

* март 2016
* март 2015 **[+]**
* апрель 2015
* апрель 2016
"""

df.groupby(['year', 'month'])[['title']].count().sort_values('title', 
                                                             ascending=False).head()

"""## 2\. Проанализируйте публикации в месяце из предыдущего вопроса

Выберите один или несколько вариантов:

* Один или несколько дней сильно выделяются из общей картины
* На хабре _всегда_ больше статей, чем на гиктаймсе
* По субботам на гиктаймс и на хабрахабр публикуют примерно одинаковое число статей

Подсказки: постройте график зависимости числа публикаций от дня; используйте параметр `hue`; не заморачивайтесь сильно с ответами и не ищите скрытого смысла :)
"""

march_df = df[(df.year == 2015) & (df.month == 3)]

march_df.groupby('day')[['title']].count().plot();

march_df.pivot_table(index='day', values='title', 
                     aggfunc='count', columns='domain').plot();

march_df[march_df.dayofweek == 6].pivot_table(index='day', 
                                              values='title', 
                                              aggfunc='count',
                                              columns='domain')

"""## 3\. Когда лучше всего публиковать статью?

* Больше всего просмотров набирают статьи, опубликованные в 12 часов дня
* У опубликованных в 10 утра постов больше всего комментариев
* Больше всего просмотров набирают статьи, опубликованные в 6 часов утра **[+]**
* Максимальное число комментариев на гиктаймсе набрала статья, опубликованная в 9 часов вечера
* На хабре дневные статьи комментируют чаще, чем вечерние
"""

df.groupby('hour')[['views']].mean().sort_values('views',
                                                 ascending=False).head()

df.groupby('hour')[['comments']].mean().sort_values('comments', 
                                                    ascending = False).head()

df[df.domain == 'geektimes.ru'].sort_values('comments', 
                                            ascending=False).head(1)

df[df.domain == 'habrahabr.ru'].groupby('hour')[['comments']].mean().plot();

"""## 4\. Кого из топ-20 авторов чаще всего минусуют?

* @Mordatyj
* @Mithgol **[+]**
* @alizar
* @ilya42
"""

df[df.author.isin([
    '@Mordatyj', '@Mithgol', 
    '@alizar', '@ilya42'])].groupby('author')[['votes_minus']]\
    .mean().sort_values('votes_minus', ascending = False)

"""## 5\. Сравните субботы и понедельники

Правда ли, что по субботам авторы пишут в основном днём, а по понедельникам — в основном вечером?
**Ответ: нет**
"""

tmp_df = df.pivot_table(index='hour', values='title', 
                        aggfunc='count', columns='dayofweek')

tmp_df.apply(lambda x: 100. * x / tmp_df.sum(), axis = 1).plot();